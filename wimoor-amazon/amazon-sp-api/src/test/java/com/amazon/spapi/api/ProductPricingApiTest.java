/*
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amazon.spapi.api;

import java.util.List;

import org.junit.Ignore;
import org.junit.Test;

import com.amazon.spapi.client.ApiException;
import com.amazon.spapi.model.productpricing.GetItemOffersBatchRequest;
import com.amazon.spapi.model.productpricing.GetItemOffersBatchResponse;
import com.amazon.spapi.model.productpricing.GetListingOffersBatchRequest;
import com.amazon.spapi.model.productpricing.GetListingOffersBatchResponse;
import com.amazon.spapi.model.productpricing.GetOffersResponse;
import com.amazon.spapi.model.productpricing.GetPricingResponse;

/**
 * API tests for ProductPricingApi
 */
@Ignore
public class ProductPricingApiTest {

    private final ProductPricingApi api = new ProductPricingApi();

    
    /**
     * 
     *
     * Returns competitive pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompetitivePricingTest() throws ApiException {
        String marketplaceId = null;
        String itemType = null;
        List<String> asins = null;
        List<String> skus = null;
        String customerType = null;
        GetPricingResponse response = api.getCompetitivePricing(marketplaceId, itemType, asins, skus, customerType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemOffersTest() throws ApiException {
        String marketplaceId = null;
        String itemCondition = null;
        String asin = null;
        String customerType = null;
        GetOffersResponse response = api.getItemOffers(marketplaceId, itemCondition, asin, customerType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemOffersBatchTest() throws ApiException {
        GetItemOffersBatchRequest getItemOffersBatchRequestBody = null;
        GetItemOffersBatchResponse response = api.getItemOffersBatch(getItemOffersBatchRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListingOffersTest() throws ApiException {
        String marketplaceId = null;
        String itemCondition = null;
        String sellerSKU = null;
        String customerType = null;
        GetOffersResponse response = api.getListingOffers(marketplaceId, itemCondition, sellerSKU, customerType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .5 | 1 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListingOffersBatchTest() throws ApiException {
        GetListingOffersBatchRequest getListingOffersBatchRequestBody = null;
        GetListingOffersBatchResponse response = api.getListingOffersBatch(getListingOffersBatchRequestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns pricing information for a seller&#39;s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPricingTest() throws ApiException {
        String marketplaceId = null;
        String itemType = null;
        List<String> asins = null;
        List<String> skus = null;
        String itemCondition = null;
        String offerType = null;
        GetPricingResponse response = api.getPricing(marketplaceId, itemType, asins, skus, itemCondition, offerType);

        // TODO: test validations
    }
    
}
