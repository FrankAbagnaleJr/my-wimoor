<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wimoor.amazon.adv.sd.dao.AmzAdvProductTargeNegativaSDMapper" >
  <resultMap id="BaseResultMap" type="com.wimoor.amazon.adv.sd.pojo.AmzAdvProductTargeNegativaSD" >
    <id column="targetId" property="targetid" jdbcType="BIGINT" />
    <result column="adGroupId" property="adgroupid" jdbcType="BIGINT" />
    <result column="profileid" property="profileid" jdbcType="BIGINT" />
    <result column="expressionType" property="expressiontype" jdbcType="CHAR" />
    <result column="expression" property="expression" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="CHAR" />
    <result column="opttime" property="opttime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    targetId, adGroupId, profileid, expressionType, expression, state, opttime
  </sql>
	<insert id="insertBatch" parameterType="java.util.List">
		replace into t_amz_adv_product_targe_negativa_sd (targetId, adGroupId, profileid, expressionType, expression, state, opttime)
		values
		<foreach collection="list" item="adv" index="index" separator=",">
			(
			#{adv.targetid,jdbcType=BIGINT},
			#{adv.adgroupid,jdbcType=BIGINT},
			#{adv.profileid,jdbcType=BIGINT},
			#{adv.expressionType,jdbcType=CHAR}, 
			#{adv.expression,jdbcType=CHAR},
			#{adv.state,jdbcType=CHAR}, 
		    #{adv.opttime,jdbcType=TIMESTAMP}
			)
		</foreach>
	</insert>
	 <select id="getProductNegativaTargeList" resultType="java.util.Map" parameterType="java.util.Map" >
   select t.adGroupId,tgp.campaignId,t.profileid,t.targetId id,t.state status,t.expression,t.expressionType,mk.name market,
  			tk.remark,p.marketplaceId marketplaceid,a.groupid groupid,tg.name groupname,t.opttime,
  			tc.name campaignName,tc.state campaignStatus,tgp.name adGroupName,tgp.state adGroupStatus ,'SD' campaignType
	    from t_amz_adv_product_targe_negativa_sd t
		left join t_amz_adv_profile p on t.profileid = p.id
		left join t_amz_adv_auth a on a.id=p.advauthId and a.disable = 0
		left join t_amazon_group tg on tg.id = a.groupid
		left join t_marketplace mk on mk.marketplaceId=p.marketplaceId
		left join t_amz_adv_adgroups_sd tgp on t.adGroupId = tgp.adGroupId  and t.profileid = tgp.profileid  
		left join t_amz_adv_campaigns_sd tc on tgp.campaignId = tc.campaignId and t.profileid = tc.profileid
		left join t_amz_adv_remark tk on tk.targetId = t.targetId and tk.adgroupId = t.adGroupId and tgp.campaignId = tk.campaignId and p.id = tk.profileid and tk.adId = 0 and tk.keywordId = 0
  		where a.shopid = #{shopid,jdbcType=CHAR}
  		<if test="campaignid != null">
			and tgp.campaignId  = #{campaignid,jdbcType=BIGINT}
		</if>
		<if test="campaignName != null and campaignName != ''">
			and tc.name like #{campaignName,jdbcType=CHAR}
		</if>
		<if test="campaignStatus != null">
			and tc.state = #{campaignStatus,jdbcType=CHAR}
		</if>
		<if test="targetingType != null">
			and tc.targetingType = #{targetingType,jdbcType=CHAR}
		</if>
		<if test="adGroupid != null">
			and t.adGroupId = #{adGroupid,jdbcType=BIGINT}
		</if>
		<if test="adGroupName != null and adGroupName != ''">
			and tgp.name like #{adGroupName,jdbcType=CHAR}
		</if>
		<if test="adGroupsStatus != null and adGroupsStatus != 'runing' and adGroupsStatus != 'stoping'">
			and tgp.state = #{adGroupsStatus,jdbcType=CHAR}
		</if>
		<if test="adGroupsStatus != null and adGroupsStatus == 'runing'">
			and tc.state = 'enabled'
			and tgp.state = 'enabled'
		</if>
		<if test="adGroupsStatus != null and adGroupsStatus == 'stoping'">
			and (tgp.state = 'paused' or (tgp.state = 'enabled' and 
			(tc.state = 'paused' or tc.state = 'archived')))
		</if>  
		<if test="profileid != null">
			and t.profileid = #{profileid,jdbcType=BIGINT}
		</if>
	    <if test="marketplaceid != null">
			and p.marketplaceId= #{marketplaceid,jdbcType=CHAR}
		</if>
		<if test="groupid != null">
			and a.groupid = #{groupid,jdbcType=CHAR}
		</if>
		<if test="state != null and state != 'runing' and state != 'stoping'">
			and t.state = #{state,jdbcType=CHAR}
		</if>
		<if test="state != null and state == 'runing'">
			and t.state = 'enabled'
			and tc.state = 'enabled'
			and tgp.state = 'enabled'
		</if>
		<if test="state != null and state == 'stoping'">
			and (t.state = 'paused' or (t.state = 'enabled' and 
			(tc.state = 'paused' or tc.state = 'archived' or tgp.state = 'paused' or tgp.state = 'archived')))
		</if>
		<if test="state == null">
			and (t.state = 'paused' or t.state = 'enabled')  
		</if>
  		<if test="search != null and search != '%%'">
			and t.expression like #{search,jdbcType=CHAR}
		</if>
  </select>
 
</mapper>